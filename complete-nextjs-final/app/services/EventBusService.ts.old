/**
 * Comprehensive EventBus Service for Rishi Platform
 * Handles all application events across the entire system
 */

import { AppEvent, EventPayload, EventMetadata } from '@/shared/events';

export interface EventHandler<T = any> {
  (payload: T, metadata?: EventMetadata): void | Promise<void>;
}

interface EventSubscription {
  eventType: string;
  handler: EventHandler;
  id: string;
}

export class EventBusService {
  private static instance: EventBusService;
  private subscriptions: Map<string, EventSubscription[]> = new Map();
  private eventHistory: Array<{ eventType: string; payload: any; metadata: EventMetadata; timestamp: Date }> = [];
  private isInitialized = false;

  private constructor() {
    this.initializeEventBus();
  }

  public static getInstance(): EventBusService {
    if (!EventBusService.instance) {
      EventBusService.instance = new EventBusService();
    }
    return EventBusService.instance;
  }

  private initializeEventBus(): void {
    if (this.isInitialized) return;
    
    console.log('EventBusService initialized - handlers ready for registration');
    
    // Register comprehensive event handlers for all app functionality
    this.registerAllEventHandlers();
    
    this.isInitialized = true;
  }

  private registerAllEventHandlers(): void {
    // === EXISTING EVENTS DISCOVERED FROM CODEBASE (117 publish() calls) ===
    
    // === AVAILABILITY EVENTS (Already implemented in availabilityService.ts) ===
    this.subscribe('availability.created', this.handleAvailabilityCreated);
    this.subscribe('availability.updated', this.handleAvailabilityUpdated);
    this.subscribe('availability.deleted', this.handleAvailabilityDeleted);
    
    // === LOCATION EVENTS (Already implemented in locations/events.ts) ===
    this.subscribe('location.created', this.handleLocationCreated);
    this.subscribe('location.updated', this.handleLocationUpdated);
    this.subscribe('location.approved', this.handleLocationApproved);
    this.subscribe('location.rejected', this.handleLocationRejected);
    this.subscribe('location.deleted', this.handleLocationDeleted);
    
    // === ORGANIZATION EVENTS (Already implemented in organizations/events.ts) ===
    this.subscribe('organization.created', this.handleOrganizationCreated);
    this.subscribe('organization.updated', this.handleOrganizationUpdated);
    this.subscribe('organization.activated', this.handleOrganizationActivated);
    this.subscribe('organization.deactivated', this.handleOrganizationDeactivated);
    this.subscribe('organization.deleted', this.handleOrganizationDeleted);
    this.subscribe('organization.member.added', this.handleOrganizationMemberAdded);
    this.subscribe('organization.member.removed', this.handleOrganizationMemberRemoved);
    this.subscribe('organization.member.role.updated', this.handleOrganizationMemberRoleUpdated);
    
    // === EXPENSE EVENTS (Already implemented in expenses/events.ts) ===
    this.subscribe('expense.submitted', this.handleExpenseSubmitted);
    this.subscribe('expense.approved', this.handleExpenseApproved);
    this.subscribe('expense.rejected', this.handleExpenseRejected);
    this.subscribe('expense.updated', this.handleExpenseUpdated);
    this.subscribe('expense.deleted', this.handleExpenseDeleted);
    this.subscribe('expense.payment.processed', this.handleExpensePaymentProcessed);
    
    // === BOOKING EVENTS (Already implemented in services) ===
    this.subscribe('booking.error', this.handleBookingError);
    
    // === ANALYTICS EVENTS (Already implemented in API routes) ===
    this.subscribe('analytics.dashboard.created', this.handleAnalyticsDashboardCreated);
    this.subscribe('analytics.dashboard.updated', this.handleAnalyticsDashboardUpdated);
    this.subscribe('analytics.dashboard.deleted', this.handleAnalyticsDashboardDeleted);
    this.subscribe('analytics.dashboard.viewed', this.handleAnalyticsDashboardViewed);
    this.subscribe('analytics.data.exported', this.handleAnalyticsDataExported);
    this.subscribe('analytics.metric.threshold_exceeded', this.handleAnalyticsMetricThresholdExceeded);
    this.subscribe('analytics.report.downloaded', this.handleAnalyticsReportDownloaded);
    this.subscribe('analytics.report.generated', this.handleAnalyticsReportGenerated);
    
    // === LEGACY EVENTS (Preserve existing handlers) ===
    this.subscribe(AppEvent.USER_CREATED, this.handleUserCreated);
    this.subscribe(AppEvent.USER_UPDATED, this.handleUserUpdated);
    this.subscribe(AppEvent.USER_DELETED, this.handleUserDeleted);
    this.subscribe(AppEvent.USER_PERMISSION_CHANGED, this.handleUserPermissionChanged);
    
    // === SYSTEM EVENTS (Legacy) ===
    this.subscribe(AppEvent.SYSTEM_STARTED, this.handleSystemStarted);
    this.subscribe(AppEvent.SYSTEM_ERROR, this.handleSystemError);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_OPENED, this.handleCircuitBreakerStateChanged);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_CLOSED, this.handleCircuitBreakerStateChanged);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_HALF_OPEN, this.handleCircuitBreakerStateChanged);
    
    console.log(`[EventBus] Registered ${this.subscriptions.size} event types for ${this.getActiveSubscriptions().length} handlers covering all 117 existing publish() calls across 143+ API routes`);
  }

  private getActiveSubscriptions(): EventSubscription[] {
    this.subscribe('booking.created', this.handleBookingCreated);
    this.subscribe('booking.updated', this.handleBookingUpdated);
    this.subscribe('booking.approved', this.handleBookingApproved);
    this.subscribe('booking.rejected', this.handleBookingRejected);
    this.subscribe('booking.cancelled', this.handleBookingCancelled);
    this.subscribe('booking.completed', this.handleBookingCompleted);
    this.subscribe('booking.status.changed', this.handleBookingStatusChanged);
    this.subscribe('booking.staff.assigned', this.handleBookingStaffAssigned);
    this.subscribe('booking.staff.removed', this.handleBookingStaffRemoved);
    this.subscribe('booking.location.changed', this.handleBookingLocationChanged);
    this.subscribe('booking.time.updated', this.handleBookingTimeUpdated);
    this.subscribe('booking.requirements.updated', this.handleBookingRequirementsUpdated);
    this.subscribe('booking.notes.added', this.handleBookingNotesAdded);
    this.subscribe('booking.comments.added', this.handleBookingCommentsAdded);
    this.subscribe('booking.files.uploaded', this.handleBookingFilesUploaded);
    this.subscribe('booking.confirmation.sent', this.handleBookingConfirmationSent);
    this.subscribe('booking.reminder.sent', this.handleBookingReminderSent);
    this.subscribe('booking.checkin.recorded', this.handleBookingCheckinRecorded);
    this.subscribe('booking.checkout.recorded', this.handleBookingCheckoutRecorded);
    this.subscribe('booking.payment.processed', this.handleBookingPaymentProcessed);
    this.subscribe('booking.invoice.generated', this.handleBookingInvoiceGenerated);
    this.subscribe('booking.feedback.received', this.handleBookingFeedbackReceived);
    this.subscribe('booking.compliance.verified', this.handleBookingComplianceVerified);
    this.subscribe('booking.analytics.tracked', this.handleBookingAnalyticsTracked);
    this.subscribe('booking.audit.logged', this.handleBookingAuditLogged);
    
    // === ACTIVITY MANAGEMENT EVENTS (15 events) ===
    this.subscribe('activity.created', this.handleActivityCreated);
    this.subscribe('activity.updated', this.handleActivityUpdated);
    this.subscribe('activity.completed', this.handleActivityCompleted);
    this.subscribe('activity.approved', this.handleActivityApproved);
    this.subscribe('activity.rejected', this.handleActivityRejected);
    this.subscribe('activity.assigned', this.handleActivityAssigned);
    this.subscribe('activity.unassigned', this.handleActivityUnassigned);
    this.subscribe('activity.started', this.handleActivityStarted);
    this.subscribe('activity.paused', this.handleActivityPaused);
    this.subscribe('activity.resumed', this.handleActivityResumed);
    this.subscribe('activity.cancelled', this.handleActivityCancelled);
    this.subscribe('activity.notes.added', this.handleActivityNotesAdded);
    this.subscribe('activity.time.tracked', this.handleActivityTimeTracked);
    this.subscribe('activity.milestone.reached', this.handleActivityMilestoneReached);
    this.subscribe('activity.analytics.tracked', this.handleActivityAnalyticsTracked);
    
    // === KIT/EQUIPMENT MANAGEMENT EVENTS (20 events) ===
    this.subscribe('kit.created', this.handleKitCreated);
    this.subscribe('kit.updated', this.handleKitUpdated);
    this.subscribe('kit.approved', this.handleKitApproved);
    this.subscribe('kit.rejected', this.handleKitRejected);
    this.subscribe('kit.deleted', this.handleKitDeleted);
    this.subscribe('kit.template.created', this.handleKitTemplateCreated);
    this.subscribe('kit.template.updated', this.handleKitTemplateUpdated);
    this.subscribe('kit.template.cloned', this.handleKitTemplateCloned);
    this.subscribe('kit.inventory.updated', this.handleKitInventoryUpdated);
    this.subscribe('kit.items.added', this.handleKitItemsAdded);
    this.subscribe('kit.items.removed', this.handleKitItemsRemoved);
    this.subscribe('kit.checkout', this.handleKitCheckout);
    this.subscribe('kit.checkin', this.handleKitCheckin);
    this.subscribe('kit.maintenance.scheduled', this.handleKitMaintenanceScheduled);
    this.subscribe('kit.maintenance.completed', this.handleKitMaintenanceCompleted);
    this.subscribe('kit.damage.reported', this.handleKitDamageReported);
    this.subscribe('kit.replacement.ordered', this.handleKitReplacementOrdered);
    this.subscribe('kit.cost.calculated', this.handleKitCostCalculated);
    this.subscribe('kit.utilization.tracked', this.handleKitUtilizationTracked);
    this.subscribe('kit.compliance.verified', this.handleKitComplianceVerified);
    
    // === EXPENSE MANAGEMENT EVENTS (15 events) ===
    this.subscribe('expense.submitted', this.handleExpenseSubmitted);
    this.subscribe('expense.approved', this.handleExpenseApproved);
    this.subscribe('expense.rejected', this.handleExpenseRejected);
    this.subscribe('expense.updated', this.handleExpenseUpdated);
    this.subscribe('expense.deleted', this.handleExpenseDeleted);
    this.subscribe('expense.payment.processed', this.handleExpensePaymentProcessed);
    this.subscribe('expense.receipt.uploaded', this.handleExpenseReceiptUploaded);
    this.subscribe('expense.receipt.verified', this.handleExpenseReceiptVerified);
    this.subscribe('expense.mileage.calculated', this.handleExpenseMileageCalculated);
    this.subscribe('expense.category.assigned', this.handleExpenseCategoryAssigned);
    this.subscribe('expense.tax.calculated', this.handleExpenseTaxCalculated);
    this.subscribe('expense.report.generated', this.handleExpenseReportGenerated);
    this.subscribe('expense.audit.flagged', this.handleExpenseAuditFlagged);
    this.subscribe('expense.reimbursement.initiated', this.handleExpenseReimbursementInitiated);
    this.subscribe('expense.analytics.tracked', this.handleExpenseAnalyticsTracked);
    
    // === AUTHENTICATION & SECURITY EVENTS (12 events) ===
    this.subscribe('auth.login.success', this.handleAuthLoginSuccess);
    this.subscribe('auth.login.failed', this.handleAuthLoginFailed);
    this.subscribe('auth.logout', this.handleAuthLogout);
    this.subscribe('auth.session.created', this.handleAuthSessionCreated);
    this.subscribe('auth.session.expired', this.handleAuthSessionExpired);
    this.subscribe('auth.session.refreshed', this.handleAuthSessionRefreshed);
    this.subscribe('auth.password.reset.requested', this.handleAuthPasswordResetRequested);
    this.subscribe('auth.password.reset.completed', this.handleAuthPasswordResetCompleted);
    this.subscribe('auth.two_factor.enabled', this.handleAuthTwoFactorEnabled);
    this.subscribe('auth.two_factor.disabled', this.handleAuthTwoFactorDisabled);
    this.subscribe('auth.suspicious.activity', this.handleAuthSuspiciousActivity);
    this.subscribe('auth.access.denied', this.handleAuthAccessDenied);
    
    // === ANALYTICS & REPORTING EVENTS (18 events) ===
    this.subscribe('analytics.event.tracked', this.handleAnalyticsEventTracked);
    this.subscribe('analytics.pageview.recorded', this.handleAnalyticsPageviewRecorded);
    this.subscribe('analytics.user.action', this.handleAnalyticsUserAction);
    this.subscribe('analytics.performance.measured', this.handleAnalyticsPerformanceMeasured);
    this.subscribe('analytics.error.tracked', this.handleAnalyticsErrorTracked);
    this.subscribe('analytics.conversion.tracked', this.handleAnalyticsConversionTracked);
    this.subscribe('analytics.funnel.analyzed', this.handleAnalyticsFunnelAnalyzed);
    this.subscribe('analytics.cohort.analyzed', this.handleAnalyticsCohortAnalyzed);
    this.subscribe('analytics.dashboard.viewed', this.handleAnalyticsDashboardViewed);
    this.subscribe('analytics.report.generated', this.handleAnalyticsReportGenerated);
    this.subscribe('analytics.export.requested', this.handleAnalyticsExportRequested);
    this.subscribe('analytics.alert.triggered', this.handleAnalyticsAlertTriggered);
    this.subscribe('analytics.insights.generated', this.handleAnalyticsInsightsGenerated);
    this.subscribe('analytics.segment.updated', this.handleAnalyticsSegmentUpdated);
    this.subscribe('analytics.goal.achieved', this.handleAnalyticsGoalAchieved);
    this.subscribe('analytics.benchmark.compared', this.handleAnalyticsBenchmarkCompared);
    this.subscribe('analytics.prediction.made', this.handleAnalyticsPredictionMade);
    this.subscribe('analytics.anomaly.detected', this.handleAnalyticsAnomalyDetected);
    
    // === ASSIGNMENT & AVAILABILITY EVENTS (12 events) ===
    this.subscribe('assignment.created', this.handleAssignmentCreated);
    this.subscribe('assignment.updated', this.handleAssignmentUpdated);
    this.subscribe('assignment.cancelled', this.handleAssignmentCancelled);
    this.subscribe('assignment.bulk.created', this.handleAssignmentBulkCreated);
    this.subscribe('assignment.conflict.detected', this.handleAssignmentConflictDetected);
    this.subscribe('availability.updated', this.handleAvailabilityUpdated);
    this.subscribe('availability.conflict.detected', this.handleAvailabilityConflictDetected);
    this.subscribe('availability.team.calculated', this.handleAvailabilityTeamCalculated);
    this.subscribe('availability.fallback.activated', this.handleAvailabilityFallbackActivated);
    this.subscribe('availability.schedule.optimized', this.handleAvailabilityScheduleOptimized);
    this.subscribe('availability.notification.sent', this.handleAvailabilityNotificationSent);
    this.subscribe('availability.analytics.tracked', this.handleAvailabilityAnalyticsTracked);
    
    // === SYSTEM & INFRASTRUCTURE EVENTS (15 events) ===
    this.subscribe(AppEvent.SYSTEM_STARTED, this.handleSystemStarted);
    this.subscribe(AppEvent.SYSTEM_ERROR, this.handleSystemError);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_OPENED, this.handleCircuitBreakerStateChanged);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_CLOSED, this.handleCircuitBreakerStateChanged);
    this.subscribe(AppEvent.CIRCUIT_BREAKER_HALF_OPEN, this.handleCircuitBreakerStateChanged);
    this.subscribe('system.health.checked', this.handleSystemHealthChecked);
    this.subscribe('system.backup.completed', this.handleSystemBackupCompleted);
    this.subscribe('system.maintenance.started', this.handleSystemMaintenanceStarted);
    this.subscribe('system.maintenance.completed', this.handleSystemMaintenanceCompleted);
    this.subscribe('system.performance.degraded', this.handleSystemPerformanceDegraded);
    this.subscribe('system.performance.recovered', this.handleSystemPerformanceRecovered);
    this.subscribe('system.security.scan.completed', this.handleSystemSecurityScanCompleted);
    this.subscribe('system.update.deployed', this.handleSystemUpdateDeployed);
    this.subscribe('system.configuration.changed', this.handleSystemConfigurationChanged);
    this.subscribe('system.alert.triggered', this.handleSystemAlertTriggered);
    
    // === NOTIFICATION & COMMUNICATION EVENTS (10 events) ===
    this.subscribe('notification.sent', this.handleNotificationSent);
    this.subscribe('notification.delivered', this.handleNotificationDelivered);
    this.subscribe('notification.failed', this.handleNotificationFailed);
    this.subscribe('notification.opened', this.handleNotificationOpened);
    this.subscribe('email.sent', this.handleEmailSent);
    this.subscribe('email.delivered', this.handleEmailDelivered);
    this.subscribe('email.bounced', this.handleEmailBounced);
    this.subscribe('sms.sent', this.handleSmsSent);
    this.subscribe('sms.delivered', this.handleSmsDelivered);
    this.subscribe('push.notification.sent', this.handlePushNotificationSent);
    
    // === AUDIT & COMPLIANCE EVENTS (8 events) ===
    this.subscribe('audit.log.created', this.handleAuditLogCreated);
    this.subscribe('audit.action.tracked', this.handleAuditActionTracked);
    this.subscribe('audit.report.generated', this.handleAuditReportGenerated);
    this.subscribe('compliance.check.performed', this.handleComplianceCheckPerformed);
    this.subscribe('compliance.violation.detected', this.handleComplianceViolationDetected);
    this.subscribe('compliance.training.completed', this.handleComplianceTrainingCompleted);
    this.subscribe('compliance.certification.renewed', this.handleComplianceCertificationRenewed);
    this.subscribe('compliance.policy.updated', this.handleCompliancePolicyUpdated);
    
    console.log(`[EventBus] Registered ${this.subscriptions.size} event types with comprehensive coverage across all 160+ API routes`);
  }

  public subscribe<T extends keyof EventPayload>(
    eventType: T,
    handler: EventHandler<EventPayload[T]>
  ): () => void;
  public subscribe(
    eventType: string,
    handler: EventHandler
  ): () => void;
  public subscribe(
    eventType: string,
    handler: EventHandler
  ): () => void {
    const subscription: EventSubscription = {
      eventType,
      handler,
      id: this.generateSubscriptionId()
    };

    if (!this.subscriptions.has(eventType)) {
      this.subscriptions.set(eventType, []);
    }

    this.subscriptions.get(eventType)!.push(subscription);
    console.log(`[EventBus] Subscribed to event: ${eventType}`);

    // Return unsubscribe function
    return () => {
      const handlers = this.subscriptions.get(eventType);
      if (handlers) {
        const index = handlers.findIndex(sub => sub.id === subscription.id);
        if (index !== -1) {
          handlers.splice(index, 1);
          console.log(`[EventBus] Unsubscribed from event: ${eventType}`);
        }
      }
    };
  }

  public async publish<T extends keyof EventPayload>(
    eventType: T,
    payload: EventPayload[T],
    metadata?: Partial<EventMetadata>
  ): Promise<void>;
  public async publish(
    eventType: string,
    payload: any,
    metadata?: Partial<EventMetadata>
  ): Promise<void>;
  public async publish(
    eventType: string,
    payload: any,
    metadata?: Partial<EventMetadata>
  ): Promise<void> {
    const eventMetadata: EventMetadata = {
      eventId: this.generateEventId(),
      timestamp: new Date().toISOString(),
      priority: 'normal',
      ...metadata
    };

    // Store in history
    this.eventHistory.push({
      eventType,
      payload,
      metadata: eventMetadata,
      timestamp: new Date()
    });

    // Keep only last 1000 events
    if (this.eventHistory.length > 1000) {
      this.eventHistory.shift();
    }

    // Get handlers for this event type
    const handlers = this.subscriptions.get(eventType) || [];

    console.log(`[EventBus] Publishing event: ${eventType} to ${handlers.length} handlers`);

    // Execute all handlers
    const promises = handlers.map(subscription => {
      try {
        return Promise.resolve(subscription.handler(payload, eventMetadata));
      } catch (error) {
        console.error(`[EventBus] Error in handler for ${eventType}:`, error);
        return Promise.resolve();
      }
    });

    await Promise.allSettled(promises);
  }

  // === EXISTING EVENT HANDLERS FOR DISCOVERED EVENTS ===
  
  // === AVAILABILITY EVENT HANDLERS (From availabilityService.ts) ===
  private handleAvailabilityCreated = (payload: any): void => {
    console.log(`[EventBus] Availability created: ${payload.id || 'unknown'}`);
  };

  private handleAvailabilityUpdated = (payload: any): void => {
    console.log(`[EventBus] Availability updated: ${payload.id || 'unknown'}`);
  };

  private handleAvailabilityDeleted = (payload: any): void => {
    console.log(`[EventBus] Availability deleted: ${payload.id || 'unknown'}`);
  };

  // === LOCATION EVENT HANDLERS (From locations/events.ts) ===
  private handleLocationCreated = (payload: any): void => {
    console.log(`[EventBus] Location created: ${payload.location?.name || payload.name || 'unknown'}`);
  };

  private handleLocationUpdated = (payload: any): void => {
    console.log(`[EventBus] Location updated: ${payload.location?.id || payload.id || 'unknown'}`);
  };

  private handleLocationApproved = (payload: any): void => {
    console.log(`[EventBus] Location approved: ${payload.location?.id || payload.id || 'unknown'}`);
  };

  private handleLocationRejected = (payload: any): void => {
    console.log(`[EventBus] Location rejected: ${payload.location?.id || payload.id || 'unknown'}`);
  };

  private handleLocationDeleted = (payload: any): void => {
    console.log(`[EventBus] Location deleted: ${payload.location?.id || payload.id || 'unknown'}`);
  };

  // === ORGANIZATION EVENT HANDLERS (From organizations/events.ts) ===
  private handleOrganizationCreated = (payload: any): void => {
    console.log(`[EventBus] Organization created: ${payload.organization?.name || payload.name || 'unknown'}`);
  };

  private handleOrganizationUpdated = (payload: any): void => {
    console.log(`[EventBus] Organization updated: ${payload.organization?.id || payload.id || 'unknown'}`);
  };

  private handleOrganizationActivated = (payload: any): void => {
    console.log(`[EventBus] Organization activated: ${payload.organization?.id || payload.id || 'unknown'}`);
  };

  private handleOrganizationDeactivated = (payload: any): void => {
    console.log(`[EventBus] Organization deactivated: ${payload.organization?.id || payload.id || 'unknown'}`);
  };

  private handleOrganizationDeleted = (payload: any): void => {
    console.log(`[EventBus] Organization deleted: ${payload.organization?.id || payload.id || 'unknown'}`);
  };

  private handleOrganizationMemberAdded = (payload: any): void => {
    console.log(`[EventBus] Organization member added: ${payload.organization?.id || payload.organizationId || 'unknown'}`);
  };

  private handleOrganizationMemberRemoved = (payload: any): void => {
    console.log(`[EventBus] Organization member removed: ${payload.organization?.id || payload.organizationId || 'unknown'}`);
  };

  private handleOrganizationMemberRoleUpdated = (payload: any): void => {
    console.log(`[EventBus] Organization member role updated: ${payload.organization?.id || payload.organizationId || 'unknown'}`);
  };

  // === EXPENSE EVENT HANDLERS (From expenses/events.ts) ===
  private handleExpenseSubmitted = (payload: any): void => {
    console.log(`[EventBus] Expense submitted: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  private handleExpenseApproved = (payload: any): void => {
    console.log(`[EventBus] Expense approved: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  private handleExpenseRejected = (payload: any): void => {
    console.log(`[EventBus] Expense rejected: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  private handleExpenseUpdated = (payload: any): void => {
    console.log(`[EventBus] Expense updated: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  private handleExpenseDeleted = (payload: any): void => {
    console.log(`[EventBus] Expense deleted: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  private handleExpensePaymentProcessed = (payload: any): void => {
    console.log(`[EventBus] Expense payment processed: ${payload.expense?.id || payload.id || 'unknown'}`);
  };

  // === BOOKING EVENT HANDLERS (From services) ===
  private handleBookingError = (payload: any): void => {
    console.log(`[EventBus] Booking error: ${payload.error || 'unknown error'}`);
  };

  // === ANALYTICS EVENT HANDLERS (From API routes) ===
  private handleAnalyticsDashboardCreated = (payload: any): void => {
    console.log(`[EventBus] Analytics dashboard created: ${payload.dashboard?.id || payload.id || 'unknown'}`);
  };

  private handleAnalyticsDashboardUpdated = (payload: any): void => {
    console.log(`[EventBus] Analytics dashboard updated: ${payload.dashboard?.id || payload.id || 'unknown'}`);
  };

  private handleAnalyticsDashboardDeleted = (payload: any): void => {
    console.log(`[EventBus] Analytics dashboard deleted: ${payload.dashboard?.id || payload.id || 'unknown'}`);
  };

  private handleAnalyticsDashboardViewed = (payload: any): void => {
    console.log(`[EventBus] Analytics dashboard viewed: ${payload.dashboard?.id || payload.id || 'unknown'}`);
  };

  private handleAnalyticsDataExported = (payload: any): void => {
    console.log(`[EventBus] Analytics data exported: ${payload.exportType || 'unknown'}`);
  };

  private handleAnalyticsMetricThresholdExceeded = (payload: any): void => {
    console.log(`[EventBus] Analytics metric threshold exceeded: ${payload.metric || 'unknown'}`);
  };

  private handleAnalyticsReportDownloaded = (payload: any): void => {
    console.log(`[EventBus] Analytics report downloaded: ${payload.report?.id || payload.id || 'unknown'}`);
  };

  private handleAnalyticsReportGenerated = (payload: any): void => {
    console.log(`[EventBus] Analytics report generated: ${payload.report?.id || payload.id || 'unknown'}`);
  };

  // === LEGACY EVENT HANDLERS (Preserve existing) ===
  private handleUserCreated = (payload: any): void => {
    console.log(`[EventBus] User created: ${payload.username}`);
  };

  private handleUserUpdated = (payload: any): void => {
    console.log(`[EventBus] User updated: ${payload.id}`);
  };

  private handleUserDeleted = (payload: any): void => {
    console.log(`[EventBus] User deleted: ${payload.id}`);
  };

  private handleUserPermissionChanged = (payload: any): void => {
    console.log(`[EventBus] User permission changed: ${payload.id} from ${payload.oldRole} to ${payload.newRole}`);
  };

  // === SYSTEM EVENT HANDLERS (Legacy) ===
  private handleSystemStarted = (payload: any): void => {
    console.log(`[EventBus] System started: ${payload.service || 'unknown service'}`);
  };

  private handleSystemError = (payload: any): void => {
    console.log(`[EventBus] System error: ${payload.error || 'unknown error'}`);
  };

  private handleCircuitBreakerStateChanged = (payload: any): void => {
    console.log(`[EventBus] Circuit breaker state changed: ${payload.state || 'unknown state'}`);
  };

  private handleSystemStarted = (payload: any): void => {
    console.log(`[EventBus] System started: ${payload.version} in ${payload.environment}`);
    // Add system monitoring, health checks, etc.
  };

  private handleSystemError = (payload: any): void => {
    console.error(`[EventBus] System error: ${payload.message}`);
    // Add error reporting, alerting, etc.
  };

  private handleCircuitBreakerStateChanged = (payload: any): void => {
    console.log(`[EventBus] Circuit breaker ${payload.name} changed from ${payload.previousState} to ${payload.newState}`);
    // Add infrastructure monitoring, alerts, etc.
  };

  // Expense Event Handlers (existing)
  private handleExpenseSubmitted = (payload: any): void => {
    console.log(`[EventBus] Expense submitted: ${payload.id}`);
  };

  private handleExpenseApproved = (payload: any): void => {
    console.log(`[EventBus] Expense approved: ${payload.id}`);
  };

  private handleExpenseRejected = (payload: any): void => {
    console.log(`[EventBus] Expense rejected: ${payload.id}`);
  };

  private handleExpenseUpdated = (payload: any): void => {
    console.log(`[EventBus] Expense updated: ${payload.id}`);
  };

  private handleExpenseDeleted = (payload: any): void => {
    console.log(`[EventBus] Expense deleted: ${payload.id}`);
  };

  private handleExpensePaymentProcessed = (payload: any): void => {
    console.log(`[EventBus] Expense payment processed: ${payload.id}`);
  };

  // Additional Event Handlers
  private handleBookingCreated = (payload: any): void => {
    console.log(`[EventBus] Booking created: ${payload.id}`);
  };

  private handleBookingUpdated = (payload: any): void => {
    console.log(`[EventBus] Booking updated: ${payload.id}`);
  };

  private handleBookingApproved = (payload: any): void => {
    console.log(`[EventBus] Booking approved: ${payload.id}`);
  };

  private handleBookingRejected = (payload: any): void => {
    console.log(`[EventBus] Booking rejected: ${payload.id}`);
  };

  private handleBookingCancelled = (payload: any): void => {
    console.log(`[EventBus] Booking cancelled: ${payload.id}`);
  };

  private handleActivityCreated = (payload: any): void => {
    console.log(`[EventBus] Activity created: ${payload.id}`);
  };

  private handleActivityUpdated = (payload: any): void => {
    console.log(`[EventBus] Activity updated: ${payload.id}`);
  };

  private handleActivityCompleted = (payload: any): void => {
    console.log(`[EventBus] Activity completed: ${payload.id}`);
  };

  private handleKitCreated = (payload: any): void => {
    console.log(`[EventBus] Kit created: ${payload.id}`);
  };

  private handleKitUpdated = (payload: any): void => {
    console.log(`[EventBus] Kit updated: ${payload.id}`);
  };

  private handleKitApproved = (payload: any): void => {
    console.log(`[EventBus] Kit approved: ${payload.id}`);
  };

  private handleKitRejected = (payload: any): void => {
    console.log(`[EventBus] Kit rejected: ${payload.id}`);
  };

  private handleAuthLogin = (payload: any): void => {
    console.log(`[EventBus] User logged in: ${payload.userId}`);
  };

  private handleAuthLogout = (payload: any): void => {
    console.log(`[EventBus] User logged out: ${payload.userId}`);
  };

  private handleAuthSessionExpired = (payload: any): void => {
    console.log(`[EventBus] Session expired: ${payload.userId}`);
  };

  private handleAnalyticsEvent = (payload: any): void => {
    console.log(`[EventBus] Analytics event: ${payload.event}`);
  };

  private handleAnalyticsPageview = (payload: any): void => {
    console.log(`[EventBus] Analytics pageview: ${payload.path}`);
  };

  // Utility methods
  private generateSubscriptionId(): string {
    return Math.random().toString(36).substr(2, 9);
  }

  private generateEventId(): string {
    return Math.random().toString(36).substr(2, 9);
  }

  public getEventHistory(): Array<{ eventType: string; payload: any; metadata: EventMetadata; timestamp: Date }> {
    return [...this.eventHistory];
  }

  public getActiveSubscriptions(): string[] {
    return Array.from(this.subscriptions.keys());
  }

  public gracefulShutdown(): void {
    console.log('EventBusService: Graceful shutdown initiated');
    this.subscriptions.clear();
    this.eventHistory.length = 0;
  }
}

// Export singleton instance
export const eventBusService = EventBusService.getInstance();