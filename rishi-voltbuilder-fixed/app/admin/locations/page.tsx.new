'use client';

import { useState, useEffect, useCallback } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useWebSocketEvents } from '@/hooks/useWebSocketEvents';
import { toast } from '@/hooks/use-toast';
import {
  Search,
  Plus,
  Filter,
  BarChart,
  Grid2x2,
  MapPin,
  Eye,
  X,
  Clock,
  ChartBar
} from "lucide-react";
import Link from "next/link";
import { format } from 'date-fns';
import { useToast } from "@/hooks/use-toast";
import { LocationFilters, LocationFilterValues } from '@/components/locations/LocationFilters';

import { SimplifiedLocationMap } from '@/components/maps/SimplifiedLocationMap';

interface Location {
  id: string;
  name: string;
  address: string;
  city: string;
  state: string;
  zipCode: string;
  latitude: number;
  longitude: number;
  locationType: string;
  status: string;
  submittedById?: string;
  createdById?: string;
  submittedByName?: string;
  submittedByOrganization?: string;
  notes?: string;
  createdAt: string;
  updatedAt: string;
}

export default function AdminLocationsPage() {
  const { toast } = useToast();
  const [searchValue, setSearchValue] = useState('');
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<string>('list');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedLocationId, setSelectedLocationId] = useState<string | null>(null);
  const [selectedLocations, setSelectedLocations] = useState<Set<string>>(new Set());
  const [bulkActionOpen, setBulkActionOpen] = useState<boolean>(false);
  const [advancedFilters, setAdvancedFilters] = useState<LocationFilterValues>({
    states: [],
    regions: [],
    cities: [],
    zipCodes: [],
    search: '',
    status: [],
    locationType: []
  });
  
  const googleMapsApiKey = "AIzaSyD-1UzABjgG0SYCZ2bLYtd7a7n1gJNYodg";

  // Fetch all locations data (including pending locations) from admin API
  const { 
    data: locationsData, 
    isLoading: locationsLoading, 
    error: locationsError,
    refetch
  } = useQuery<Location[]>({
    queryKey: ['/api/admin/locations'],
    queryFn: async () => {
      const res = await fetch('/api/admin/locations', {
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      if (!res.ok) {
        throw new Error('Failed to fetch locations');
      }
      return res.json();
    },
    // Set shorter staleTime to refresh data more frequently
    staleTime: 5000, // 5 seconds
    refetchOnWindowFocus: true
  });
  
  // Refetch data on mount to ensure fresh data
  useEffect(() => {
    refetch();
  }, [refetch]);
  
  // Subscribe to location events via WebSocket
  const { events } = useWebSocketEvents({
    events: ['location.created', 'location.updated', 'location.deleted', 'location.status.updated'],
    autoReconnect: true
  });
  
  // Handle incoming location events
  useEffect(() => {
    if (!events || events.length === 0) return;
    
    // Get the most recent event
    const latestEvent = events[events.length - 1];
    
    if (latestEvent) {
      // Handle different location events
      switch (latestEvent.type) {
        case 'location.status.updated':
          toast({
            title: 'Location Status Updated',
            description: `A location's status has been changed to ${latestEvent.payload.newStatus}`,
            variant: 'default',
          });
          refetch(); // Refresh the data
          break;
          
        case 'location.created':
          toast({
            title: 'New Location Added',
            description: 'A new location has been added to the system',
            variant: 'default',
          });
          refetch(); // Refresh the data
          break;
          
        case 'location.updated':
          toast({
            title: 'Location Updated',
            description: `Location details have been modified`,
            variant: 'default',
          });
          refetch(); // Refresh the data
          break;
          
        case 'location.deleted':
          toast({
            title: 'Location Removed',
            description: 'A location has been removed from the system',
            variant: 'destructive',
          });
          refetch(); // Refresh the data
          break;
      }
    }
  }, [events, refetch]);

  // Calculate filtered locations based on search and advancedFilters
  const filteredLocations = !locationsData ? [] : !searchValue && !advancedFilters.search && 
    advancedFilters.states.length === 0 && 
    advancedFilters.regions.length === 0 &&
    advancedFilters.cities.length === 0 && 
    advancedFilters.zipCodes.length === 0 &&
    advancedFilters.status.length === 0 &&
    advancedFilters.locationType.length === 0
        ? locationsData
        : locationsData.filter((location: Location) => {
            const searchMatch = !searchValue || 
              location.name.toLowerCase().includes(searchValue.toLowerCase()) ||
              location.address.toLowerCase().includes(searchValue.toLowerCase()) ||
              location.city.toLowerCase().includes(searchValue.toLowerCase()) ||
              location.state.toLowerCase().includes(searchValue.toLowerCase()) ||
              (location.zipCode && location.zipCode.toLowerCase().includes(searchValue.toLowerCase()));
            
            const advancedSearchMatch = !advancedFilters.search || 
              location.name.toLowerCase().includes(advancedFilters.search.toLowerCase()) ||
              location.address.toLowerCase().includes(advancedFilters.search.toLowerCase()) ||
              location.city.toLowerCase().includes(advancedFilters.search.toLowerCase()) ||
              location.state.toLowerCase().includes(advancedFilters.search.toLowerCase()) ||
              (location.zipCode && location.zipCode.toLowerCase().includes(advancedFilters.search.toLowerCase()));
            
            const stateMatch = advancedFilters.states.length === 0 || 
              advancedFilters.states.includes(location.state);
            
            // Region match would be here if we had region data in the location model
            const regionMatch = advancedFilters.regions.length === 0;
            
            const cityMatch = advancedFilters.cities.length === 0 || 
              advancedFilters.cities.includes(location.city);
            
            const zipMatch = advancedFilters.zipCodes.length === 0 || 
              (location.zipCode && advancedFilters.zipCodes.includes(location.zipCode));
            
            // Status filter
            const statusMatch = advancedFilters.status.length === 0 || 
              (location.status && advancedFilters.status.includes(location.status.toLowerCase()));
            
            // Location type filter
            const locationTypeMatch = advancedFilters.locationType.length === 0 || 
              (location.locationType && advancedFilters.locationType.includes(location.locationType.toLowerCase()));
            
            return searchMatch && 
                advancedSearchMatch && 
                stateMatch && 
                regionMatch && 
                cityMatch && 
                zipMatch && 
                statusMatch && 
                locationTypeMatch;
          });

  // Handle advanced filters change
  const handleAdvancedFiltersChange = useCallback((filters: LocationFilterValues) => {
    setAdvancedFilters(filters);
  }, []);

  // Format date for display
  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM d, yyyy');
    } catch (e) {
      return dateString;
    }
  };

  // Get color based on location type
  const getTypeColor = (type: string) => {
    if (!type) return "bg-gray-600 text-gray-100";
    
    switch (type.toLowerCase()) {
      case 'venue':
      case 'event_venue':
        return "bg-purple-700 text-purple-50";
      case 'office':
      case 'corporate_office':
        return "bg-blue-700 text-blue-50";
      case 'retail':
      case 'store':
      case 'retail_store':
        return "bg-green-700 text-green-50";
      case 'warehouse':
      case 'distribution_center':
        return "bg-amber-700 text-amber-50";
      default:
        return "bg-gray-600 text-gray-100";
    }
  };

  // Handle search submission
  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setAdvancedFilters({
      ...advancedFilters,
      search: searchValue
    });
  };

  // Toggle search field visibility
  const toggleSearch = () => {
    setIsSearchOpen(!isSearchOpen);
    if (!isSearchOpen) {
      // Focus the search field when opened
      setTimeout(() => {
        const searchInput = document.getElementById('location-search');
        if (searchInput) searchInput.focus();
      }, 100);
    }
  };

  // Toggle filter panel visibility
  const toggleFilters = () => {
    setIsFilterOpen(!isFilterOpen);
  };
  
  // Bulk selection handlers
  const toggleLocationSelection = (locationId: string) => {
    setSelectedLocations(prev => {
      const newSet = new Set(prev);
      if (newSet.has(locationId)) {
        newSet.delete(locationId);
      } else {
        newSet.add(locationId);
      }
      return newSet;
    });
  };
  
  const selectAllLocations = () => {
    if (filteredLocations.length > 0) {
      const allIds = new Set(filteredLocations.map(loc => loc.id));
      setSelectedLocations(allIds);
    }
  };
  
  const clearSelections = () => {
    setSelectedLocations(new Set());
  };
  
  // Bulk action handlers
  const handleBulkStatusChange = async (newStatus: string) => {
    if (selectedLocations.size === 0) return;
    
    try {
      const response = await fetch('/api/admin/locations/bulk-update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          locationIds: Array.from(selectedLocations),
          updates: { status: newStatus }
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update locations');
      }
      
      toast({
        title: 'Locations Updated',
        description: `${selectedLocations.size} locations updated to ${newStatus}`,
        variant: 'default',
      });
      
      // Refresh data
      refetch();
      clearSelections();
      setBulkActionOpen(false);
    } catch (error) {
      toast({
        title: 'Update Failed',
        description: error instanceof Error ? error.message : 'An error occurred',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="w-full min-h-screen bg-background text-foreground">
      <div className="container mx-auto py-8 px-4 space-y-6">
        {/* Page Header: Title with Action Buttons */}
        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4 mb-8">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">Location Management</h1>
            <p className="text-gray-400 mt-1">
              View, filter, and manage all locations in the system
            </p>
          </div>

          <div className="flex gap-3">
            <Link
              href="/admin/locations/approval-queue"
              className="inline-flex items-center justify-center rounded-md bg-amber-900/30 border border-amber-600/30 px-4 py-2 text-sm font-medium text-amber-200 hover:bg-amber-900/40 transition"
            >
              <Badge className="bg-amber-500 hover:bg-amber-500 mr-2 h-5 w-5 rounded-full p-0 text-center text-xs font-semibold">
                3
              </Badge>
              Pending Approvals
            </Link>
            
            <Button asChild className="bg-blue-600 hover:bg-blue-700">
              <Link href="/admin/locations/new">
                <Plus className="mr-2 h-4 w-4" />
                Add New Location
              </Link>
            </Button>
          </div>
        </div>
        
        {/* Main Content Container */}
        <div className="rounded-lg border border-border overflow-hidden">
          {/* Search & Filter Bar */}
          <div className="p-4 border-b border-border bg-card dark:bg-card/90">
            <div className="flex flex-col md:flex-row gap-4">
              {isSearchOpen ? (
                <form 
                  onSubmit={handleSearchSubmit}
                  className="flex grow"
                >
                  <div className="relative flex grow">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <Input
                      id="location-search"
                      type="search"
                      placeholder="Name, address, city..."
                      className="pl-9 pr-4 py-2 w-full bg-background dark:bg-muted/50 border-input text-foreground placeholder:text-muted-foreground rounded-l-md"
                      value={searchValue}
                      onChange={(e) => setSearchValue(e.target.value)}
                    />
                    <Button 
                      type="submit" 
                      className="rounded-l-none bg-blue-600 hover:bg-blue-700"
                    >
                      Apply
                    </Button>
                    <Button 
                      type="button"
                      variant="ghost" 
                      className="ml-2 text-gray-400 hover:text-white hover:bg-gray-800"
                      onClick={toggleSearch}
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                </form>
              ) : (
                <div className="flex items-center">
                  <h3 className="text-lg font-medium">Search Locations</h3>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="ml-2 text-gray-400 hover:text-white hover:bg-gray-800"
                    onClick={toggleSearch}
                  >
                    <Search className="h-4 w-4" />
                  </Button>
                </div>
              )}

              <div className="flex items-center ml-auto">
                <Button
                  variant="outline"
                  size="sm"
                  className="border-gray-700 hover:bg-gray-800 text-gray-300 hover:text-white"
                  onClick={toggleFilters}
                >
                  <Filter className="h-4 w-4 mr-2" />
                  Filters
                </Button>
              </div>
            </div>

            {/* Filters Panel */}
            {isFilterOpen && (
              <div className="mt-4 p-4 border border-border rounded-md bg-background dark:bg-card/70">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-medium text-gray-300">Filter Locations</h4>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="text-gray-400 hover:text-white hover:bg-gray-800"
                    onClick={toggleFilters}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
                
                <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
                  <LocationFilters 
                    onFilterChange={handleAdvancedFiltersChange}
                    initialValues={advancedFilters}
                  />
                </div>
                
                <div className="flex justify-end mt-4">
                  <Button
                    variant="outline"
                    size="sm"
                    className="text-gray-400 hover:text-white border-gray-700 hover:bg-gray-800 mr-2"
                    onClick={() => handleAdvancedFiltersChange({
                      search: '', 
                      states: [], 
                      regions: [], 
                      cities: [], 
                      zipCodes: [],
                      status: [],
                      locationType: []
                    })}
                  >
                    Reset All
                  </Button>
                  <Button
                    className="bg-blue-600 hover:bg-blue-700"
                    size="sm"
                    onClick={toggleFilters}
                  >
                    Apply Filters
                  </Button>
                </div>
              </div>
            )}
            
            {/* Active Filter Pills */}
            {(advancedFilters.search || 
              advancedFilters.states.length > 0 || 
              advancedFilters.cities.length > 0 || 
              advancedFilters.zipCodes.length > 0 ||
              advancedFilters.status.length > 0 ||
              advancedFilters.locationType.length > 0) && (
              <div className="flex flex-wrap gap-2 mt-4">
                {advancedFilters.search && (
                  <Badge className="bg-blue-900/30 text-blue-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <Search className="h-3 w-3 mr-1" />
                    {advancedFilters.search}
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-blue-800/50 text-blue-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        search: ''
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                {advancedFilters.states.length > 0 && (
                  <Badge className="bg-blue-900/30 text-blue-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <span>States: {advancedFilters.states.length}</span>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-blue-800/50 text-blue-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        states: []
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                {advancedFilters.cities.length > 0 && (
                  <Badge className="bg-green-900/30 text-green-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <span>Cities: {advancedFilters.cities.length}</span>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-green-800/50 text-green-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        cities: []
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                {advancedFilters.zipCodes.length > 0 && (
                  <Badge className="bg-purple-900/30 text-purple-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <span>ZIP Codes: {advancedFilters.zipCodes.length}</span>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-purple-800/50 text-purple-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        zipCodes: []
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                
                {advancedFilters.status.length > 0 && (
                  <Badge className="bg-blue-900/30 text-blue-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <span>Status: {advancedFilters.status.length}</span>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-blue-800/50 text-blue-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        status: []
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                
                {advancedFilters.locationType.length > 0 && (
                  <Badge className="bg-purple-900/30 text-purple-200 rounded-full px-2.5 py-1 flex items-center gap-1">
                    <span>Type: {advancedFilters.locationType.length}</span>
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="h-4 w-4 p-0 rounded-full hover:bg-purple-800/50 text-purple-300"
                      onClick={() => handleAdvancedFiltersChange({
                        ...advancedFilters,
                        locationType: []
                      })}
                    >
                      <X className="h-3 w-3" />
                    </Button>
                  </Badge>
                )}
                

                <Button
                  variant="ghost"
                  size="sm"
                  className="text-gray-400 hover:text-white hover:bg-gray-800 h-6 rounded-full px-2 text-xs"
                  onClick={() => handleAdvancedFiltersChange({
                    search: '', 
                    states: [], 
                    regions: [], 
                    cities: [], 
                    zipCodes: [],
                    status: [],
                    locationType: []
                  })}
                >
                  Clear all
                </Button>
              </div>
            )}
          </div>
          
          {/* Tabs Navigation */}
          <div className="border-b border-border">
            <Tabs 
              value={activeTab} 
              onValueChange={(value) => {
                setActiveTab(value);
                // Add a small delay to allow the map to fully initialize when switching to map tab
                if (value === 'map') {
                  setTimeout(() => {
                    // If a location is already selected, ensure it's centered
                    if (selectedLocationId) {
                      // Force a re-render by setting the ID again
                      const currentId = selectedLocationId;
                      setSelectedLocationId(null);
                      setTimeout(() => setSelectedLocationId(currentId), 50);
                    }
                  }, 100);
                }
              }} 
              className="w-full">
              <TabsList className="bg-transparent h-12 border-b border-border w-full justify-start">
                <TabsTrigger
                  value="list"
                  className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-foreground text-muted-foreground border-b-transparent px-6 h-12"
                >
                  List/Grid View
                </TabsTrigger>
                <TabsTrigger
                  value="map"
                  className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-foreground text-muted-foreground border-b-transparent px-6 h-12"
                >
                  Map View
                </TabsTrigger>
                <TabsTrigger
                  value="analytics"
                  className="rounded-none data-[state=active]:border-b-2 data-[state=active]:border-blue-500 data-[state=active]:text-foreground text-muted-foreground border-b-transparent px-6 h-12"
                >
                  Analytics
                </TabsTrigger>
              </TabsList>

              {/* View Mode Selector (Only for List Tab) */}
              {activeTab === 'list' && (
                <div className="absolute right-4 top-[222px]">
                  <Button
                    variant={viewMode === 'grid' ? 'secondary' : 'ghost'}
                    size="sm"
                    className={`px-2 ${viewMode === 'grid' ? 'bg-gray-800 text-white' : 'text-gray-400'}`}
                    onClick={() => setViewMode('grid')}
                  >
                    <Grid2x2 className="h-4 w-4" />
                  </Button>
                  <Button
                    variant={viewMode === 'list' ? 'secondary' : 'ghost'}
                    size="sm"
                    className={`px-2 ${viewMode === 'list' ? 'bg-gray-800 text-white' : 'text-gray-400'}`}
                    onClick={() => setViewMode('list')}
                  >
                    <svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" className="h-4 w-4">
                      <path d="M1.5 5.25C1.5 5.66421 1.83579 6 2.25 6H12.75C13.1642 6 13.5 5.66421 13.5 5.25C13.5 4.83579 13.1642 4.5 12.75 4.5H2.25C1.83579 4.5 1.5 4.83579 1.5 5.25ZM1.5 9.75C1.5 10.1642 1.83579 10.5 2.25 10.5H12.75C13.1642 10.5 13.5 10.1642 13.5 9.75C13.5 9.33579 13.1642 9 12.75 9H2.25C1.83579 9 1.5 9.33579 1.5 9.75Z" fill="currentColor" fillRule="evenodd" clipRule="evenodd"></path>
                    </svg>
                  </Button>
                </div>
              )}

              {/* Loading State */}
              {locationsLoading ? (
                <div className="flex justify-center py-24">
                  <div className="flex flex-col items-center gap-2">
                    <div className="animate-spin h-8 w-8 border-2 border-blue-500 border-t-transparent rounded-full"></div>
                    <p className="text-sm text-gray-400">Loading locations...</p>
                  </div>
                </div>
              ) : locationsError ? (
                <div className="p-6">
                  <div className="bg-red-900/20 border border-red-700/30 text-red-200 p-4 rounded-md flex items-start">
                    <div className="flex-shrink-0 mr-3 mt-0.5">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="text-red-200 font-medium mb-1">Error loading locations</h3>
                      <p className="text-red-300/80 text-sm">
                        Unable to load location data. Please try again later or contact support if the issue persists.
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <>
                  {/* List/Grid View Tab */}
                  <TabsContent value="list" className="p-0">
                    {filteredLocations.length === 0 ? (
                      <div className="text-center py-24">
                        <MapPin className="h-12 w-12 text-gray-500 mx-auto mb-4" />
                        <h3 className="text-lg font-medium mb-2">No locations found</h3>
                        <p className="text-gray-400 max-w-md mx-auto">
                          {advancedFilters.search || 
                          advancedFilters.states.length > 0 || 
                          advancedFilters.cities.length > 0 || 
                          advancedFilters.zipCodes.length > 0 ||
                          advancedFilters.status.length > 0 ||
                          advancedFilters.locationType.length > 0
                            ? "No locations match your search criteria." 
                            : "There are no locations yet."}
                        </p>
                        <Button className="mt-6 bg-blue-600 hover:bg-blue-700" asChild>
                          <Link href="/admin/locations/new">
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Location
                          </Link>
                        </Button>
                      </div>
                    ) : viewMode === 'grid' ? (
                      // Grid view with bulk actions
                      <div className="p-6">
                        {/* Bulk Actions Menu for Grid */}
                        {selectedLocations.size > 0 && (
                          <div className="sticky top-0 z-10 flex items-center justify-between bg-blue-950/80 backdrop-blur-sm p-3 mb-4 rounded-md border border-blue-700/50 text-white">
                            <div className="flex items-center">
                              <span className="font-medium mr-2">{selectedLocations.size} selected</span>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                onClick={clearSelections}
                                className="text-blue-200 hover:text-white hover:bg-blue-800/50 text-xs"
                              >
                                Clear
                              </Button>
                            </div>
                            <div className="flex items-center gap-2">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleBulkStatusChange('active')}
                                className="bg-green-900/30 hover:bg-green-900/50 text-green-200 hover:text-green-100 border border-green-700/30 text-xs"
                              >
                                <div className="h-2 w-2 rounded-full bg-green-500 mr-1.5"></div>
                                Set Active
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleBulkStatusChange('inactive')}
                                className="bg-gray-800/50 hover:bg-gray-800/70 text-gray-300 hover:text-gray-200 border border-gray-700/30 text-xs"
                              >
                                <div className="h-2 w-2 rounded-full bg-gray-500 mr-1.5"></div>
                                Set Inactive
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleBulkStatusChange('flagged')}
                                className="bg-red-900/30 hover:bg-red-900/50 text-red-200 hover:text-red-100 border border-red-700/30 text-xs"
                              >
                                <div className="h-2 w-2 rounded-full bg-red-500 mr-1.5"></div>
                                Flag
                              </Button>
                            </div>
                          </div>
                        )}
                        
                        {/* Grid Cards */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          {filteredLocations.map((location: Location) => (
                            <div 
                              key={location.id} 
                              className={`bg-card border border-border rounded-lg overflow-hidden transition-all hover:border-muted-foreground/50 hover:shadow-md ${
                                selectedLocations.has(location.id) ? 'border-blue-500 dark:border-blue-600 bg-blue-900/10' : ''
                              }`}
                            >
                              <div className="p-4">
                                <div className="flex justify-between items-start mb-3">
                                  <div className="flex items-center gap-2">
                                    <input 
                                      type="checkbox" 
                                      className="rounded border-gray-400 text-blue-600 focus:ring-blue-500 h-4 w-4"
                                      checked={selectedLocations.has(location.id)}
                                      onChange={() => toggleLocationSelection(location.id)}
                                    />
                                    <h3 className="font-medium text-foreground">{location.name}</h3>
                                  </div>
                                  <Badge
                                    className={`text-xs px-2 py-0.5 rounded ${getTypeColor(location.locationType)}`}
                                  >
                                    {location.locationType ? location.locationType.replace('_', ' ') : 'Unknown'}
                                  </Badge>
                                </div>
                                <p className="text-muted-foreground text-sm mb-3">{location.address}</p>
                                <p className="text-muted-foreground/70 text-sm">{location.city}, {location.state}</p>
                                
                                <div className="mt-4 pt-3 border-t border-border flex items-center justify-between">
                                  <div className="flex items-center text-muted-foreground text-xs">
                                    <Clock className="h-3 w-3 mr-1" />
                                    Added {formatDate(location.createdAt)}
                                  </div>
                                  <Button 
                                    variant="ghost" 
                                    size="sm" 
                                    className="text-primary hover:text-primary/90 hover:bg-primary/10"
                                    asChild
                                  >
                                    <Link href={`/admin/locations/${location.id}`}>
                                      <Eye className="h-4 w-4 mr-1" />
                                      View Details
                                    </Link>
                                  </Button>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      // List view
                      <div className="overflow-hidden">
                        <div className="overflow-x-auto">
                          {/* Bulk Actions Menu */}
                          {selectedLocations.size > 0 && (
                            <div className="sticky top-0 z-10 flex items-center justify-between bg-blue-950/80 backdrop-blur-sm p-3 border-b border-blue-700/50 text-white">
                              <div className="flex items-center">
                                <span className="font-medium mr-2">{selectedLocations.size} selected</span>
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  onClick={clearSelections}
                                  className="text-blue-200 hover:text-white hover:bg-blue-800/50 text-xs"
                                >
                                  Clear
                                </Button>
                              </div>
                              <div className="flex items-center gap-2">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleBulkStatusChange('active')}
                                  className="bg-green-900/30 hover:bg-green-900/50 text-green-200 hover:text-green-100 border border-green-700/30 text-xs"
                                >
                                  <div className="h-2 w-2 rounded-full bg-green-500 mr-1.5"></div>
                                  Set Active
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleBulkStatusChange('inactive')}
                                  className="bg-gray-800/50 hover:bg-gray-800/70 text-gray-300 hover:text-gray-200 border border-gray-700/30 text-xs"
                                >
                                  <div className="h-2 w-2 rounded-full bg-gray-500 mr-1.5"></div>
                                  Set Inactive
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => handleBulkStatusChange('flagged')}
                                  className="bg-red-900/30 hover:bg-red-900/50 text-red-200 hover:text-red-100 border border-red-700/30 text-xs"
                                >
                                  <div className="h-2 w-2 rounded-full bg-red-500 mr-1.5"></div>
                                  Flag
                                </Button>
                              </div>
                            </div>
                          )}
                          
                          <table className="w-full">
                            <thead>
                              <tr className="border-b border-border bg-card dark:bg-card/90">
                                <th className="text-left p-4 font-medium text-muted-foreground w-10">
                                  <div className="flex items-center">
                                    <input 
                                      type="checkbox" 
                                      className="rounded border-gray-400 text-blue-600 focus:ring-blue-500 h-4 w-4"
                                      checked={selectedLocations.size > 0 && selectedLocations.size === filteredLocations.length}
                                      onChange={(e) => {
                                        if (e.target.checked) {
                                          selectAllLocations();
                                        } else {
                                          clearSelections();
                                        }
                                      }}
                                    />
                                  </div>
                                </th>
                                <th className="text-left p-4 font-medium text-muted-foreground">Name</th>
                                <th className="text-left p-4 font-medium text-muted-foreground hidden md:table-cell">Address</th>
                                <th className="text-left p-4 font-medium text-muted-foreground hidden lg:table-cell">Type</th>
                                <th className="text-left p-4 font-medium text-muted-foreground hidden lg:table-cell">Added On</th>
                                <th className="text-right p-4 font-medium text-muted-foreground">Actions</th>
                              </tr>
                            </thead>
                            <tbody>
                              {filteredLocations.map((location: Location, index: number) => (
                                <tr 
                                  key={location.id} 
                                  className={`border-b border-border hover:bg-card/70 ${selectedLocations.has(location.id) ? 'bg-blue-900/10' : ''}`}
                                >
                                  <td className="p-4 w-10">
                                    <div className="flex items-center">
                                      <input 
                                        type="checkbox" 
                                        className="rounded border-gray-400 text-blue-600 focus:ring-blue-500 h-4 w-4"
                                        checked={selectedLocations.has(location.id)}
                                        onChange={() => toggleLocationSelection(location.id)}
                                      />
                                    </div>
                                  </td>
                                  <td className="p-4">
                                    <div>
                                      <div className="font-medium text-foreground">{location.name}</div>
                                      <div className="text-sm text-muted-foreground md:hidden">{location.city}, {location.state}</div>
                                    </div>
                                  </td>
                                  <td className="p-4 hidden md:table-cell">
                                    <div className="text-foreground/90">{location.address}</div>
                                    <div className="text-sm text-muted-foreground">{location.city}, {location.state} {location.zipCode}</div>
                                  </td>
                                  <td className="p-4 hidden lg:table-cell">
                                    <Badge
                                      className={`text-xs px-2 py-0.5 rounded ${getTypeColor(location.locationType)}`}
                                    >
                                      {location.locationType ? location.locationType.replace('_', ' ') : 'Unknown'}
                                    </Badge>
                                  </td>
                                  <td className="p-4 hidden lg:table-cell text-muted-foreground">
                                    {formatDate(location.createdAt)}
                                  </td>
                                  <td className="p-4 text-right">
                                    <Button 
                                      variant="ghost" 
                                      size="sm" 
                                      className="text-primary hover:text-primary/90 hover:bg-primary/10"
                                      asChild
                                    >
                                      <Link href={`/admin/locations/${location.id}`}>
                                        <Eye className="h-4 w-4 mr-1" />
                                        View
                                      </Link>
                                    </Button>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    )}
                  </TabsContent>
                  
                  {/* Map View Tab */}
                  <TabsContent value="map" className="p-6">
                    <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                      {/* Map container */}
                      <div className="lg:col-span-3 order-2 lg:order-1">
                        <div className="h-[500px] rounded-lg border border-border overflow-hidden bg-card dark:bg-card/90">
                          <SimplifiedLocationMap
                            key={`locationmap-${selectedLocationId || 'all'}-${activeTab}-${filteredLocations.length}`} 
                            apiKey={googleMapsApiKey}
                            locations={filteredLocations
                              .filter(location => 
                                typeof location.latitude === 'number' && 
                                typeof location.longitude === 'number' && 
                                !isNaN(location.latitude) && 
                                !isNaN(location.longitude)
                              )
                              .map((location) => ({
                                id: location.id,
                                name: location.name,
                                address: location.address,
                                latitude: Number(location.latitude),
                                longitude: Number(location.longitude),
                                locationType: location.locationType,
                                state: location.state
                              }))}
                            selectedLocationId={selectedLocationId}
                            onMarkerClick={(locationId: string) => {
                              setSelectedLocationId(locationId);
                            }}
                            height={500}
                          />
                        </div>

                        {/* Selected Location Details */}
                        {selectedLocationId && filteredLocations.find((l: Location) => l.id === selectedLocationId) && (
                          <div className="mt-6 p-4 border border-border rounded-lg bg-card dark:bg-card/90">
                            {(() => {
                              const selectedLocation = filteredLocations.find((l: Location) => l.id === selectedLocationId);
                              if (!selectedLocation) return null;
                              
                              return (
                                <div className="flex flex-col md:flex-row justify-between">
                                  <div>
                                    <div className="flex items-center">
                                      <h3 className="text-lg font-medium text-foreground mr-3">{selectedLocation.name}</h3>
                                      <Badge
                                        className={`text-xs px-2 py-0.5 rounded ${getTypeColor(selectedLocation.locationType)}`}
                                      >
                                        {selectedLocation.locationType ? selectedLocation.locationType.replace('_', ' ') : 'Unknown'}
                                      </Badge>
                                    </div>
                                    <p className="text-muted-foreground mt-2">{selectedLocation.address}</p>
                                    <p className="text-muted-foreground/70 text-sm mt-1">{selectedLocation.city}, {selectedLocation.state} {selectedLocation.zipCode}</p>
                                  </div>
                                  
                                  <div className="mt-4 md:mt-0 flex items-center">
                                    <Button 
                                      className="bg-primary hover:bg-primary/90"
                                      size="sm"
                                      asChild
                                    >
                                      <Link href={`/admin/locations/${selectedLocation.id}`}>
                                        <Eye className="h-4 w-4 mr-1" />
                                        View Full Details
                                      </Link>
                                    </Button>
                                  </div>
                                </div>
                              );
                            })()}
                          </div>
                        )}
                      </div>
                      
                      {/* Location list sidebar */}
                      <div className="lg:col-span-1 order-1 lg:order-2">
                        <div className="border border-border rounded-lg overflow-hidden bg-card dark:bg-card/90">
                          <div className="p-2 border-b border-border flex justify-between items-center">
                            <h3 className="font-medium text-foreground text-sm">Locations</h3>
                            <span className="text-muted-foreground text-xs">{filteredLocations.length}</span>
                          </div>
                          <ScrollArea className="h-[434px]">
                            <div className="py-1">
                              {filteredLocations.length === 0 ? (
                                <div className="text-center py-3">
                                  <p className="text-muted-foreground text-xs">No locations found</p>
                                </div>
                              ) : (
                                filteredLocations.map((location: Location) => (
                                  <div 
                                    key={location.id}
                                    className={`py-1.5 px-2 ${selectedLocationId === location.id ? 'bg-primary/10' : 'hover:bg-muted/50'} cursor-pointer border-l-2 ${selectedLocationId === location.id ? 'border-primary' : 'border-transparent'}`}
                                    onClick={(e) => {
                                      e.preventDefault();
                                      
                                      // Reset selected ID to trigger rerender
                                      const currentId = location.id;
                                      setSelectedLocationId(null);
                                      
                                      // First set the active tab 
                                      setActiveTab('map');
                                      
                                      // Then set the ID with a small delay to ensure tab change completes
                                      setTimeout(() => setSelectedLocationId(currentId), 50);
                                    }}
                                  >
                                    <div className="flex items-center gap-2">
                                      <div className={`h-2 w-2 rounded-full flex-shrink-0 ${getTypeColor(location.locationType)}`}></div>
                                      <div className="truncate flex-1">
                                        <span className="text-foreground text-xs font-medium block truncate">{location.name}</span>
                                        <span className="text-muted-foreground text-[10px] block truncate">{location.city}, {location.state}</span>
                                      </div>
                                    </div>
                                  </div>
                                ))
                              )}
                            </div>
                          </ScrollArea>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                  
                  {/* Analytics Tab */}
                  <TabsContent value="analytics" className="p-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="border border-border rounded-lg bg-card dark:bg-card/90 p-4">
                        <h3 className="font-medium text-foreground mb-2">Location Types</h3>
                        <p className="text-muted-foreground text-sm mb-4">Distribution by type</p>
                        <div className="h-[300px] flex items-center justify-center border border-border rounded-md bg-muted/30">
                          <div className="text-center p-6">
                            <ChartBar className="h-12 w-12 text-muted-foreground/60 mx-auto mb-4" />
                            <p className="text-muted-foreground">Analytics visualizations will be displayed here</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="border border-border rounded-lg bg-card dark:bg-card/90 p-4">
                        <h3 className="font-medium text-foreground mb-2">Geographic Distribution</h3>
                        <p className="text-muted-foreground text-sm mb-4">Locations by state</p>
                        <div className="h-[300px] flex items-center justify-center border border-border rounded-md bg-muted/30">
                          <div className="text-center p-6">
                            <ChartBar className="h-12 w-12 text-muted-foreground/60 mx-auto mb-4" />
                            <p className="text-muted-foreground">Analytics visualizations will be displayed here</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </TabsContent>
                </>
              )}
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
}